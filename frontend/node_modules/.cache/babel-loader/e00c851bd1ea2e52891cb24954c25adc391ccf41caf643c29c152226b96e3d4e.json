{"ast":null,"code":"var _jsxFileName = \"E:\\\\bwc3\\\\src\\\\Html5QrcodePlugin.jsx\";\n// Html5QrcodePlugin.jsx\n// CREDITS :- https://github.com/scanapp-org/html5-qrcode-react/tree/main\nimport { Html5QrcodeScanner } from \"html5-qrcode\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst qrcodeRegionId = \"html5qr-code-full-region\";\nclass Html5QrcodePlugin extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: qrcodeRegionId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 16\n    }, this);\n  }\n  componentWillUnmount() {\n    // TODO(mebjas): See if there is a better way to handle\n    //  promise in `componentWillUnmount`.\n    this.html5QrcodeScanner.clear().catch(error => {\n      console.error(\"Failed to clear html5QrcodeScanner. \", error);\n    });\n  }\n  componentDidMount() {\n    // Creates the configuration object for Html5QrcodeScanner.\n    function createConfig(props) {\n      var config = {};\n      if (props.fps) {\n        config.fps = props.fps;\n      }\n      if (props.qrbox) {\n        config.qrbox = props.qrbox;\n      }\n      if (props.aspectRatio) {\n        config.aspectRatio = props.aspectRatio;\n      }\n      if (props.disableFlip !== undefined) {\n        config.disableFlip = props.disableFlip;\n      }\n      return config;\n    }\n    var config = createConfig(this.props);\n    var verbose = this.props.verbose === true;\n\n    // Suceess callback is required.\n    if (!this.props.qrCodeSuccessCallback) {\n      throw \"qrCodeSuccessCallback is required callback.\";\n    }\n    this.html5QrcodeScanner = new Html5QrcodeScanner(qrcodeRegionId, config, verbose);\n    this.html5QrcodeScanner.render(this.props.qrCodeSuccessCallback, this.props.qrCodeErrorCallback);\n  }\n}\n;\nexport default Html5QrcodePlugin;","map":{"version":3,"names":["Html5QrcodeScanner","React","jsxDEV","_jsxDEV","qrcodeRegionId","Html5QrcodePlugin","Component","render","id","fileName","_jsxFileName","lineNumber","columnNumber","componentWillUnmount","html5QrcodeScanner","clear","catch","error","console","componentDidMount","createConfig","props","config","fps","qrbox","aspectRatio","disableFlip","undefined","verbose","qrCodeSuccessCallback","qrCodeErrorCallback"],"sources":["E:/bwc3/src/Html5QrcodePlugin.jsx"],"sourcesContent":["// Html5QrcodePlugin.jsx\r\n// CREDITS :- https://github.com/scanapp-org/html5-qrcode-react/tree/main\r\nimport { Html5QrcodeScanner } from \"html5-qrcode\";\r\nimport React from 'react';\r\n\r\nconst qrcodeRegionId = \"html5qr-code-full-region\";\r\n\r\nclass Html5QrcodePlugin extends React.Component {\r\n    render() {\r\n        return <div id={qrcodeRegionId} />;\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // TODO(mebjas): See if there is a better way to handle\r\n        //  promise in `componentWillUnmount`.\r\n        this.html5QrcodeScanner.clear().catch(error => {\r\n            console.error(\"Failed to clear html5QrcodeScanner. \", error);\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Creates the configuration object for Html5QrcodeScanner.\r\n        function createConfig(props) {\r\n            var config = {};\r\n            if (props.fps) {\r\n            config.fps = props.fps;\r\n            }\r\n            if (props.qrbox) {\r\n            config.qrbox = props.qrbox;\r\n            }\r\n            if (props.aspectRatio) {\r\n            config.aspectRatio = props.aspectRatio;\r\n            }\r\n            if (props.disableFlip !== undefined) {\r\n            config.disableFlip = props.disableFlip;\r\n            }\r\n            return config;\r\n        }\r\n\r\n        var config = createConfig(this.props);\r\n        var verbose = this.props.verbose === true;\r\n\r\n        // Suceess callback is required.\r\n        if (!(this.props.qrCodeSuccessCallback )) {\r\n            throw \"qrCodeSuccessCallback is required callback.\";\r\n        }\r\n\r\n        this.html5QrcodeScanner = new Html5QrcodeScanner(\r\n            qrcodeRegionId, config, verbose);\r\n        this.html5QrcodeScanner.render(\r\n            this.props.qrCodeSuccessCallback,\r\n            this.props.qrCodeErrorCallback);\r\n    }\r\n};\r\n\r\nexport default Html5QrcodePlugin;\r\n"],"mappings":";AAAA;AACA;AACA,SAASA,kBAAkB,QAAQ,cAAc;AACjD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,cAAc,GAAG,0BAA0B;AAEjD,MAAMC,iBAAiB,SAASJ,KAAK,CAACK,SAAS,CAAC;EAC5CC,MAAMA,CAAA,EAAG;IACL,oBAAOJ,OAAA;MAAKK,EAAE,EAAEJ;IAAe;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACtC;EAEAC,oBAAoBA,CAAA,EAAG;IACnB;IACA;IACA,IAAI,CAACC,kBAAkB,CAACC,KAAK,CAAC,CAAC,CAACC,KAAK,CAACC,KAAK,IAAI;MAC3CC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAChE,CAAC,CAAC;EACN;EAEAE,iBAAiBA,CAAA,EAAG;IAChB;IACA,SAASC,YAAYA,CAACC,KAAK,EAAE;MACzB,IAAIC,MAAM,GAAG,CAAC,CAAC;MACf,IAAID,KAAK,CAACE,GAAG,EAAE;QACfD,MAAM,CAACC,GAAG,GAAGF,KAAK,CAACE,GAAG;MACtB;MACA,IAAIF,KAAK,CAACG,KAAK,EAAE;QACjBF,MAAM,CAACE,KAAK,GAAGH,KAAK,CAACG,KAAK;MAC1B;MACA,IAAIH,KAAK,CAACI,WAAW,EAAE;QACvBH,MAAM,CAACG,WAAW,GAAGJ,KAAK,CAACI,WAAW;MACtC;MACA,IAAIJ,KAAK,CAACK,WAAW,KAAKC,SAAS,EAAE;QACrCL,MAAM,CAACI,WAAW,GAAGL,KAAK,CAACK,WAAW;MACtC;MACA,OAAOJ,MAAM;IACjB;IAEA,IAAIA,MAAM,GAAGF,YAAY,CAAC,IAAI,CAACC,KAAK,CAAC;IACrC,IAAIO,OAAO,GAAG,IAAI,CAACP,KAAK,CAACO,OAAO,KAAK,IAAI;;IAEzC;IACA,IAAI,CAAE,IAAI,CAACP,KAAK,CAACQ,qBAAuB,EAAE;MACtC,MAAM,6CAA6C;IACvD;IAEA,IAAI,CAACf,kBAAkB,GAAG,IAAId,kBAAkB,CAC5CI,cAAc,EAAEkB,MAAM,EAAEM,OAAO,CAAC;IACpC,IAAI,CAACd,kBAAkB,CAACP,MAAM,CAC1B,IAAI,CAACc,KAAK,CAACQ,qBAAqB,EAChC,IAAI,CAACR,KAAK,CAACS,mBAAmB,CAAC;EACvC;AACJ;AAAC;AAED,eAAezB,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}